
#encode bye gumball watterson
#selamat mencoba
import base64
exec (base64.b64decode ('
#encode bye gumball watterson
#selamat mencoba
import base64
exec (base64.b64decode ('CiNlbmNvZGUgYnllIGd1bWJhbGwgd2F0dGVyc29uCiNzZWxhbWF0IG1lbmNvYmEKaW1wb3J0IGJhc2U2NApleGVjIChiYXNlNjQuYjY0ZGVjb2RlICgnQ2lObGJtTnZaR1VnWW5sbElHZDFiV0poYkd3Z2QyRjBkR1Z5YzI5dUNpTnpaV3hoYldGMElHMWxibU52WW1FS2FXMXdiM0owSUdKaGMyVTJOQXBsZUdWaklDaGlZWE5sTmpRdVlqWTBaR1ZqYjJSbElDZ25RMmxPYkdKdFRuWmFSMVZuV1c1c2JFbEhaREZpVjBwb1lrZDNaMlF5UmpCa1IxWjVZekk1ZFVOcFRucGFWM2hvWWxkR01FbEhNV3hpYlU1MldXMUZTMkZYTVhkaU0wb3dTVWRLYUdNeVZUSk9RWEJzWlVkV2FrbERhR2xaV0U1c1RtcFJkVmxxV1RCYVIxWnFZakpTYkVsRFoyNVJNbXhQWWtkS2RGUnVXbUZTTVZadVYxYzFjMkpGYkVoYVJFWnBWakJ3YjFsclpETmFNbEY1VW1wQ2ExSXhXalZaZWtrMVpGVk9jRlJ1Y0dGV00yaHZXV3hrUjAxRmJFaE5WM2hwWWxVMU1sZFhNVVpUTWtaWVRWaGthVTB3YjNkVFZXUkxZVWROZVZaVVNrOVJXRUp6V2xWa1YyRnJiRVJoUjJ4YVYwVTFjMVJ0Y0ZKa1ZteHhWMVJDWVZJeFduRlpha3BUWWtWc1JGb3lOVkpOYlhoUVdXdGtTMlJHVW5WWGJVWlRUVlphZFZZeFl6RmpNa3BHWWtWb1lWSkZXbkJXYWtKM1lqRnNjbHBFVG1GTmJFWTFWVzF3UTJFeFNYaFhhbFphWld0ck1WcEdWazlqUmxKMVkwZEdWMDB5YUhaWFYzaHJVakF4Um1KRmFFNVdNMmh3V1d4Vk1VMXNaRmhOVlZwVVRXdGFXVlJXYUd0aFZUQjNZak5rVkZaWFVreFpWV1JPWlZaYVZWTnJPVkpYUlVwNlYyeFdhMVl5Um5KaVJWSm9Vako0WVZZd1ZURmpNVkowWTBaS2ExWnRlSGhXTVZKRFdWWkplRmR1UmxwaGEzQlVXV3RXYzFKR2IzbE9Wa3BPWWxob1VWZFhkR3RUTWxKSFZXNVdXR0pWV2xSVVZscGhaRlpaZUZsNlJtcE5hM0JIV1d0V2IxbFdTa1pYYmtKWFlXdEtNMWxxUm5OamJIQkZWRzFHVG1KRldURldWekYzVVRKRmVGTllhRmhoYkZwaFdsZDBjazFXY0VkV2F6bHFVbXhLTVZrd1pFZFdNREI1WVVoYVdGWXphSEpWYWtGNFVtMUtSbUZGTlZkTk1taDNWMWQ0VmsxVk1YTmFSbWhPVmxad1ZWUlhkR0ZYVmxKWFlVZDBhRlpVUWpOWmFrNXJWa1phV0ZWcmVGcFdWMUpQV2xaYVlWWldUbkpQVmtwWVVsVndObFl5ZUZkaE1WbDVVbTVLYVZKV1NtOVZha28wV1ZaWmQxWlVSbXBOVmtvd1dUQmFTMkV4V25SbFNHaFhUVlpLUkZkV1drcGxSbVIxVW14d2FHRXpRbFZYVjNSWFl6RktSMkl6YkU5V2EzQlBXV3hvYjFWV1pGaGtSM1JVVFd4S1NGWlhOVmRYUjBwV1YyeFNWVlpzY0doYVJscGFaVVpzTmxKdGNFNWhNMEpJVjFkMFYySXhiRmRUYTFwWVltdEtXRmxYZEV0Tk1XeHhVbTVPYW1KSVFrWldSekZIVkcxS1JsZFVSbGRXZWtZelZWUktSbVZHVGxsaFJtaG9Za1p3YUZkc1pEQmphekZYWTBWa1YyRjZiSEZWYlhoTFRWWnJkMXBGWkZkTlJFSTFXVlZvWVZkR1dYcGhTRXBXWVd0R05GVnRNVXRTYlVaR1RsWmtUazF0YUROV01XUTBWbXN4VmsxWVRtRlNiV2hQVm14YWQxWldVbGhrUjBaWVZteEtXRmxWWkRCaFJscFZVV3BPV21Gck5YSldhMXBoVjBaV2NtVkdjRmRXTVVwUVYyeGFZVmxXV2xkVWJrcFFWbXR3V1ZWc1ZuZE9iRmw1WlVaa2FFMVdiRFZWYlRWTFlWWktWMU50T1ZaaGEyOHdWMVphV21ReFdsVlNiWEJPVm10dmQxZFVRbUZUTWtWNFYyNVNiRk5IYUZoVVZscExVa1prVjFkcmNHeFNiVkl4VlcxNGQyRkhSWHBSYkZaWVZqTlNXRmw2Umt0U01rbDZZa1U1VjJFelFsQlhWM2h2WWpGV1YxcEdhR3RTTTFKVlZGZDRTMU5HV2xoT1ZtUllVakJ3VjFZeWVGTldWbHB6WTBkb1lWSnNjR0ZhVlZwelRteEtkR05GTldoTk1FcEpWakZrTUZZeVNYaGlSbVJVWVRGd1dWbHRkRXRYUm14WVpFVjBUazFYZUhoVmJUVlBZVzFLU1ZGcldsZFNla1pJVmtjeFMxSnNaRlZTYkdSWFpXdFplbFpXVWt0U2JWWkhWR3hzYUZKdGFHOVphMXAzWVVaa2MxcEVRbXBoZWtaWVdUQldhMVl5UmpaaVNFWldZbGhvVEZSV1duSmtNWEJHV2taa1RsSkZTVEZYVmxadldWWmtSMWRZY0doVFJYQlhXVmQwUjA1R1ZuUk5WWFJUWWxWYVIxUnNXbXRVYXpGMFlVUk9WMDFYVVRCV2JYTjRWbXN4V1ZSdFJsTmlWMmhRVm0xNFlXUXhXbGRWYkdoclVqQmFXVlp0ZUV0WFJteFdXa1JDYUZKc2NGWlZWM0JQVjIxR2NrNVlTbGRoTVhCb1ZqQmFWMk50VmtkalJtUlhUVlZ3VVZZeWVHRlpWbXhYVjJ4a1ZXSnJjRkZXYlhSM1YxWldjMVp1WkU5aVJtdzFXbFZhYTJGRk1WZGlSRlpXWWxSV1RGbFdXa3RXTVU1MFQxWmFhR0V5T0hkV01WcGhWMjFSZUZkc1ZsTmlXRUpQVm0xMGRtUXhaRlZSYlVaVVRXdFdORll5TlZOaVJrNUlZVVpvVlZac2NFeFZhMXByVmpGa2NtTkhlRk5pVmtsNFZsY3hOR1F5UmtoU1dIQlNZa1phV1ZacVRsTlhSbXcyVW10MFUwMXJiRFpaYTFVMVZqSkZlbEZzUWxoV00yaDJXV3BHVjFZeGNFZGhSM1JUVFRGS1ZsWkdaRFJUTVU1SFYyeG9UMVp0VWxsVmFrSjNWakZaZVdWR1RsZFdiSEI2V1RCa2IxbFdTbk5qUjBaaFZsWndlbFJ0ZUV0a1IwNUdUbGRvVGsxRmNFcFdha1pyVFVaWmVWTllhR2xTYlZKVldWUkdkMWRXYkhSa1JYUllVbTE0V1ZwRlZqQlVhekZZWlVob1ZtSlVWbEJaVnpGTFUxWkdjbGRzWkZObGExcEpWbXRqZUZNeFNuTmFSbFpUWWtkU1dGcFhkRnBsYkZwWFZXdDBVMkpXV2toV1IzaHpZVVpLZEdGSE9WcGhNWEF6V1ZWYWEyTXhjRVZSYlhCb1pXdGFXVmRVUWxkaE1WbDVVbXBhYVZORldsZFpiR2h2VkVaU1YxZHVTbXROV0VKSFYydGFhMVJzU2taVFZFWllWbXhhZGxkV1dtdFNNV1JaWTBkb1ZGSllRbGhYVm1Rd1VqQTFSMVp1VWs1V1dGSlVXV3hXWVZJeFVuTlhiWFJWWVhwR01GbFZVazlXTURGWVZWUkNWMkpZVGpSV2JYTjRWMVpTZEZKc1RtbFdNbWhSVm0weE5GbFhVWGhYYkdSV1lrZG9jbFZxUW1GWFZscDBaVVYwV0ZKdGVGZFhhMUpEWVVaS2MyTkdXbFpXTTBKUVZqSXhSMk5yTlZsVGJHUm9UVmhDYjFacVFtRldNazUwVm10a2FsSnRVbGhVVmxaM1ZWWlplV1ZIUmxwV2JYaFlWako0YTFaWFNuSmpSa1pYWWxoU00xWXhXbGRqTVZwMVdrVTVhVkp0ZHpGWGJGWmhZVEpHUmsxV1pHbFNSbHBYV1d4U1YxUkdiRmRYYTNSWFRWVTFNRlF4V21GaFIwVjVUMGhrVjAxV2NHaFdNakZTWlVaa2MxWnNUbWxYUlVwUVZtMHhNR1J0VVhoYVJsWlNZbFZhVlZSWGRGZE9SbGw1VGxaT2FWSnJOVWxaVlZwdlZsWmFjMk5GZUZaaE1YQnlWbXBHYTJOdFRraGxSazVwVm10c05GWnNZM2hPUjFGNVVtdG9VMWRJUWxOWmExcGhWMVphY1ZSc1RsaFNiWGN5VlcxME1GVXdNWEppUkZwYVlURlZNVlpxU2tabGJFWnpVV3hvVjAweWFESlhWM0JIVmpGWmVHTkZaR2hTTTFKVVZGUkdTMVpzV2tkYVJGSlVUVlUxU0ZZeWVHOVVNVnAwVld4c1ZtRnJTak5XYWtaYVpWZFdSMVJzWkZkaVNFSTJWMVJDYTJJeGJGZFRiazVxVWpCYWFGWnNXbmRsYkZKMFpVVjBhMUl3TlVkVWJHUnZWR3N4Um1ORmNGZGhhMXB5VkZWYVdtVldUbGxoUjJ4VFlsWktWbGRXVWtka01XUlhZa2hTYTFKWVVsbFZiVEUwVjFad1JsWnFRbFZoZWtaWldsVm9iMVp0U2xWV2JFSmFWbnBHVEZVeFdrZGpiR1J6V2taT2JHRXhjRXBXYlhScVpVWk5lRk51VG1GU2JGcFVXV3RrVTFkR2NGaGtSbkJzWWtad1dGWlhkREJWTWtwWFYydG9WMUl6YUhwWlZWcExaRWRHU0U5V2NHaE5XRUY2VjFaV1lXRXlUWGhqUlZaU1lsaENiMXBYZEdGWFZtUlZVV3hrYUUxV2JEVlZiWEJoWVZaT1JsZHNaRnBpUjJoMlZrVmFVMVl4WkhWVGJYUk9WMFZLU0ZZeWRHRmhNVkp6VTJ0YVZGWkZXbGxXYlhoaFpHeGtWMWR0ZEZOTlYxSmFXVEJrYjFaR1NsbFJiR2hZVm0xUmQxVnFRVEZTTVZwMVZXczFWMWRHU2xWWFYzaFhXVlpKZUZWdVRsaGlXRkpXV1Zod1IwMUdiRlpWYXpsWFRVUkdXVlpXVWtOV01rcFpWR3BTVjJKWVRqUldNVnBUWkVaS2MxUnRiRmROYldoU1ZtMHdlRTVHYkZoVldHaFlZa2RTVjFsclpHOWpiRlp4VVcxR1dGWnNjREJhVlZZd1YwWktkR1ZHWkZoaE1VcEVXVlZhUzJNeVRrZFhiRnBYVFRCS1VWWnFTWGhTTWs1eVRsWnNWR0pIVW05VVZtaERZakZhY1ZGdFJsZE5helV3Vm0xMGEyRnNTblJWYkdoVlZteGFNMVpXV2xwbFYxWklVbXh3VjJKWWFGbFdha28wWVRGYVdGTnVTbXBTYTFwWVdXeG9VMDB4V1hoWGJHUnFUVlp3TVZkclZUVmhWa3AwWkhwR1dHSkdXbWhaVkVwSFVtc3hWMXBIYkZOU2JIQllWMWQ0VTFZeFVrZGlSbVJZWVROU1dGUldWVEZOUmxGNFYyMUdhRkl3VmpWVU1HaHJWakF4VjJOSGFGZE5ha1pUV2xWYWEyTXhXbk5VYld4WVVsVndVVlp0TUhoTlIxSjBWVmhvWVZKc1dsTlpiRlpoVmxaU1dHUkdaRTlTYkd3MVZHeGFUMkZXU25KT1ZXeGFWbFp3ZGxac1dtRmpNazVHWlVaYWFFMVlRbmxXYlhCSFlUSk9kRlJyYUd4U2F6VndWbTEwYzA1R1duTlpNMmhQVWpGR05WVnRkRzlWTVdSSlVXeE9XbUV4Y0doV01WcGhZMVpTYzFSc2FGTmlXR041VmxjeE1FMUdWWGROV0VwcFVrWndZVmxVUmxaTlZscHhVMnRhYkdKRlducFZWM2h2VmpBd2VXRkVTbGhXTTBKSVZtcEdXbVZIVGtaYVIyaFRUVEZLVlZaR1VrZFRNVnB6VjJ0a1lWSkdTbFZVVmxVeFUwWlplV1ZIT1ZWTlZuQXdWbGQ0YzFadFJuSlRhazVYWVd0YVlWcFdaRmRTTVZKeldrWmthVk5GU1RKV01WSkRZVEpKZUdKR1pGUmlhelZ4VldwQ1lXRkdXbk5YYm1Sc1lrWktNRnBWVmpCaE1VbDNUbFZrVldKSFVuWldSM040VW0xT1JtTkdaR2hoTVhCNVZrWldZVmR0VmxkVWJHeG9Vako0VkZsc1drdFdiR1JYVld0a2EwMVhVbGhaYTJoVFlURktXVlZzYkZaaVZFVXdWakZhZDFKc1duRlJiRlpvWld0YVdsZHNWbTlpTVZwMFUyeFdWMkpGU21GV2JuQkhWRVpWZUZkclpHcGlSMUo2VjJ0YVQySkhSWGhqUlhCWFlsaFNjVnBWV2s1bFJrNTFWRzFHVTJKR2NGVlhWM1JyVlRGa1IyTkdhR3RTYmtKeldXdGFkMWRHV2xoa1JFSldUV3R3V0ZZeWRHOVdNVWw2WVVod1dsWldjRXhhUldSSFUwVTVWMk5IYUU1WFJVWTJWakZhVjFsWFJYbFVXR2hxVWxaYVUxbHNhRU5pTVhCWVpFZEdXRlp0VWxaVlYzaHJZVVV4VjJKRVZsWmlXRUpvV1ZaYVQxSnNaSE5hUm5CcFVqSm9NbFpyVm1GVk1WbDRXa2hXVkdKWVVrOVdNRlpMVTBaWmVXUkhSbWhOVmtwNlZUSjBZVlpHV2taWGJHeFhZbGhvYUZwSGVHdFdNV1IwWkVaT1RsWXhTbUZYVkVKcllqRmFSMU5zYkZKaVIyaFpWbTB4VW1ReFZuRlJWRVpUVFZad01WWlhjekZXTVdSSFUyeFdXRll6YUZoWFZscEtaVVpXZFZSc2FHbFhSa3BYVjFab2QxSXdNVWRpUmxwV1lYcHNXRlJWVWtkWFZscFhWV3RPVjAxcmNGcFdSM0JUVmpKS1dWUnFVbGROVm5CVVdrVmFTMk14VW5SaVJtUk9ZbGRvVTFadE1IZGxSVFZIWWtab1ZsZEhhRmxaYTJSVFZqRnNjbHBIT1dwaVJscDRWVmN4UjFkR1duTmpSRUpoVmxaWmQxWXdXa3RrUjFaSFdrWm9hRTFWY0VWWFZsWmhVekpOZVZSclpGaGlSbkJZVkZSQ1MxVldXbkZUV0doVFRXczFlVlJzV25OV1IwcElWVzA1VlZadGFFUlpha1poWTFaR2RGSnNaRTVoZWxWM1ZtMHhNR0V5Um5OVGJsSldZa2RvVmxadGVHRk5NVnBYVjJ4d2JGWXhXa2xWYlhoM1ZqSktXV0ZHYkZkaGEyOHdXVlJHWVZkR1RuVlRiWEJUWVRGd1dWZFhlRzlWTURCNFYxaG9XR0pIVW5GVVZscDNUVlprY2xaVVZtaFdhM0F3V2tod1IxZEhTa2RYYldoYVZrVndTRlZ0YzNoV01YQklZa1pPVTJKSVFsbFdNV1EwVlRGWmVGVnJaR2xTYlZKWldWUk9VMWRHVWxkV1ZFWk9VbXhHTkZZeU1VZGhSa2wzVm1wV1ZVMUhhSEpXYWtGNFZqSk9TR0ZHWkU1aGExcFVWMnhXWVdFeVRYaFhiazVWWWxkNFdWVnNWbmRWVmxwMFRVaG9UbEl4U2pCV1ZtaHZXVlpLYzFkc1RscGlSbHBvVm14YVUxZEhVa2RhUlRsVFlrZDNNVlpIZUdGVU1rWlhVMjVLVDFaWGVHRldiRnAzWkd4YWMxZHRSbXBOYXpWSFdsVmFZV0ZGTVZsUmJteFhZbGhDU0ZsVVNrOWtSbEp5WVVkNFUyRjZWbmRXYlRFd1l6QTFSMWR1VGxwTk1taFFWV3BHUjA1V1ZuUmtSemxXVFZkU1NsVlhlRTlYYlVWNFkwZG9WMDFXY0doWk1WcFRZekZTYzJGR1RtbFhSMDQxVm14amVFMUZNVWRXV0dST1YwVndjRlZyV25kWlZteFZVbXhhVGxac2NIaFZNblF3WVcxS1JrNVljRnBoTVhCMlZtcEJkMlZYUmtkaFJtUlRZa1p3V0Zkc1ZtRlRiVlpJVkd0YWFWSnNTbkJWYlRWRFpHeGFSMVZyWkZSTlZuQjZWMnRhYjJKR1NYZFhiVVpYWVd0YWFGcFhlRnBsVjFKSVQxWldUbFp1UWxwV2JHUTBZVEZrZEZOclpGaGlSMmhXV1d4b2IxZEdXWGRhUm1SVFRWWktlbGt3V210aFZrbzJZVVJXVjJKSFVUQlpha3BTWlVaa2MxcEdhRmhUUlVwMlZsY3dlR0l4WkVkaVNFcFlZbTFTVjFWdGVIZGxiRmw1WkVSQ2FHRjZSbGRVYkdoelZsZEtTRlZ1Y0ZkV1JYQk1XVEo0VDJSSFJrZGFSMnhZVWpKb05GWXllRmRXYXpGWFZHdGtWV0pIZUc5VmJYaDNWMVpXY1ZOdE9WaGlSMUpZVmxkMGEyRXdNVmRqUm1oYVlURndXRlpzWkV0U2F6VlhZVVpXVjJKSVFYcFhiRnBoV1ZkU1JrNVdhR3RTTW1od1ZteG9RMU14V2xkYVJFSnBUVlpzTTFSV2FFZFdNa3BHVTJ4b1ZtRXhXak5XUlZwWFpFZE9ObEpzYUZkTlJGWkpWMVpXYTJJeFVuUlRhMXBwVFRKNFdGbHNhRk5qYkZKeVYyMTBhMUpzY0RGV1YzaFBZVVV4YzFOdWFGZFdla0kwVmxSR1lWSXhWbk5XYkZKcFZrZDRlbFpYTVRSa01VNUhWMWhzVGxaWFVsaFdiRkpIWlZaU1YxVnNUbGROVld3MldWVm9kMWRzV1hwaFJYUmhWbTFTU0ZWcVJsZGpNV1IwWWtaT1RtSlhhRWRXYlRGM1V6QTFSMkpHYUZaaE1YQlBWbXhrTkdJeFZuUmxTR1JWVFZad01GUnNWazlXUmxwMFZXeG9WMVl6VFRGWlZWVjRWMGRXUjJGR1drNWliV2cyVm0wd2VGTXlUblJVYTJSaFVtNUNjRlZ0ZEhkVFJtUnlWV3RrVmsxck1UUlhhMmhUWVRGSmVsRnVRbFpOUmxwTVZYcEdZV05zY0VWVmJXaE9WbXR2ZDFaVVNqQmhNa1pXVFVoc1ZtSkhlR0ZaVkVaM1lVWmFjbGRzWkU5aVJYQXdXa1ZhVDFSc1dYaFRiVVpZVmtWS2FGVjZTa2RTYXpGSllVWlNhVkl4U2xsWFYzaHZZakpHUjJORlZsSlhSMmh4VkZkek1WTkdaSEpYYlRsb1ZtdHNORlV5Tlc5WFJsbDZZVVpvWVZKRldsQlZha1ozVTFaT2RGSnNVbE5XUmxveVZtMHdlRTFIVVhkTlZtUlhZa2RvVUZacVFtRlhSbEpZWkVaa1QxSnRkRE5aVlZaclYyeGFjMk5HYUZwTlJuQjJWMVphUzFZeVRraGhSbkJPWW0xbmVsWlhjRWRaVjFKSVUydG9hVkpyTlhCWlZFSnpUbXhhZEUxVVVsWk5WVlkwVmpGb2MxWnNaRWhoUm14YVlUSlNWRlpxUm5OamJIQklUMWR3YVZKc1dYcFdNblJoVkRGYVZrMVdaRmhoYTBwV1ZtMTRTMVpHYkhKWGJVWnJVakZhU0ZkcldtdGhWa3B5WTBac1YyRnJTbWhWTWpGU1pWWlNjbGR0YUZOaWEwcDJWa1phVjJReFpGZFhXR2hZWWxWYVZWUldaRk5UUmxwWVpVaE9hRkpyY0RCV1Z6VkRWakF4U0ZWdVdsZFNiSEJ5Vm14YVQyUlhUa1pPVm1ScFUwVkpNbFp0ZUdwTlZsVjRWbGhzVkdFeGNGQldiWGhMVjBac2NscEhPVk5TYkhCWldsVmFkMkpHV1hoVGEyeFdZbGhvTTFacVFYaFdiR1JWVVd4a2FFMXNSak5XTVZwaFZqRkplRnBJVmxaaVYyaFVXbGN4TkZkR1pGaGxSazVUVFZad1NGWXlkRmRWTWtwR1RsWnNWbUpHU2toV01WcFNaVVphVlZadGFGZGhNMEY0Vmxaa05HRXhXWGhYYWxwVFZrVktZVlpyVm1GamJHdzJVbTEwYTFac1NucFhhMlJ2WVZaS2RWRnNjRmROVjFFd1dXcEtTbVZXVm5WVWJHaHBZa1Z3VUZadGVHOVZNVnBYVm01R1VtSlZXbFZWYlRFMFZqRlplVTFVUW1oU2EzQldWVzE0ZDFac1duUmhSRTVYWVd0YVlWcFhNVWRUUjBaSFkwWmtVMWRGU2xKV2JURjNVakZWZVZWc1pGUmlhelZaV1d4a2IyTXhiSEpYYm1SWVlrWnNORmRyVWxOaFZURnlZa1JTV0dFeGNISldNRnByVTBkV1NWTnNXbWxYUlRFMFZtMXdSMVV4WkVoVmEyaFRZa1pLVkZscldscE5SbVJYVm0xMFRsSnRVa2hWTVdocllXeEtXR0ZHYUZWV2VsWjJXVEo0WVdOV1RuSmtSbVJYWVROQmVGWnFTalJoTVZWNFYyNVdVbUpVYkZoWmJHaERVMFpzVlZOck5XeFNia0pLVmxjeE1GVXhXa2RYYkd4WFlXdEtXRlV5YzNoU01XUjFWVzE0VTAweFNsRldWekY2WlVVMVIxZHNhRTlXYXpWWVZXcENkMU5XV2xobFJtUllZa1pzTmxsVlVrOVdNREZYWTBod1YySkdjRkJaTW5NMVZtczVWMVJ0YkZSU1ZYQkpWbTE0WVZsV1ZYaFRXR2hZVjBkNFZGbFhlSGRYUm14eVdrYzVXbFp0ZUZaVk1uaFBWR3N4VjJOR1dsWldiV2h5V1d0YVdtUXhaSEpoUm5CT1VtNUNlVlp0Y0VKa01sWllVbXRrVjJKSFVuQlZiWFIzVWtaa2NsVnJkRmROVld3MFdUQldhMkZXU1hsbFJsSlZWa1Z3ZGxac1dtRlNNVlp5Vkd4U1RtSkdjRmxXYWtvd1lURmtTRk5zYkZKaVJVcFlXV3RhUzFKR1VuSlhia3ByVFZad01GVnRlR3RVYlVWNlVXdG9WMUl6YUdoWmFrWmhaRVpLZFZOc1VtbFdNbWh2Vm0weE5HUXhXWGhqUm1SWFZrVmFXRmxyV2t0bGJHUnlWMjEwYUZack5VZFZNblJ6VmpKS1dWRnJkR0ZXVjFKTFdsVmFkMU5XVG5KT1ZtUnBWbXR3TkZac1VrTmlNVVY0V2tWa2FWTkZOVzlWYm5CelYwWldkRTFVUWs5V2JrSlhWbXhTVjJGRk1WWmlSRkpXVFc1U2VsWXlNVVpsUjA1SlUyeGthR0V4Y0UxV2JYQkhXVmRPVjFadVRtRlNNbmhZVld4YVYwMHhXWGhYYlhCc1VteHNORlpIZEd0V01rcElaVWM1Vm1GclNtaFdiRnBYWXpGV2MxcEhiRTVXYmtKYVYyeFdhMUl5UlhkTldFcFBWbTFvV0ZsclpHOWpiRnB4VTJ0MGExSnNXbnBaVlZwM1lVVXhXVkZ0T1ZoaVJuQm9WMVprVTFKck5WZGhSM1JUVFcxb2QxWnRlRzlSTVU1WFYyeFdWR0ZzU25CVVZtUlRVMVpXYzJGSE9WaFNiVkpKVmxkNGIxWldXbGRqUkU1WFVsWndlVnBXWkU5T2JFcHpXa1prYUUxWVFUSldNVkpEV1ZkRmVGZFlaRTVXYkhCd1dsZDBkMWRHYkhOaFJ6bFhVbXhhV1ZSV1drdGlSbHB6WTBod1dHRXhjSEpaVm1STFVqSk9TRTlXWkZkbGExVjNWMnRTUjFWdFZrZFdiazVYWWtWd2IxUlVSa3RYUmxwMFRWUlNhMDFzV2xoV01uaHZZVEZLV1ZWdVFsWmlXRkl6V2xaYVUyTXhXblJQVm1ST1ZtMDRlVlp0TVRSaU1WbDRWMnBhVTJFemFGZFpiRkpIVlVaV2NWTnJaRlJTYTNCNlYydGtOR0ZGTVZkWFdIQlhZV3R2ZDFaVVJrcGxWa3BaWVVkR1UxWXlhRmxYVmxKTFlqSk9jMVp1VGxaaWF6VllWVzE0UzFkR1dYbE9WM1JWVFd0d1NGbHJVbGRaVmtwWVZXdG9XbFpXVmpSV01HUlhVakpHUjFwR1RrNU5WWEIyVmpGYWEwNUdVWGhUYms1aFUwVTFhRlZ0TlVOaU1WSllaVVYwVG1KR2NEQmFSV1JIVjJ4YWMyTkdhRlpOYWxaWVZteGtTMWRXUm5OaFJuQlhVbFp2ZVZkc1ZtRlhiVlpZVld0b2ExSXllRTlXYlRFelRVWmFjVk5xUWxwV2JIQklWMnRXYzFWdFNraGhSbVJhWWtkb2RsUlVSbUZqYkdSeldrZHdWMkV6UVhkWGExWnJUVVpWZVZOcmJGSlhSMmhZVm10V2QwNXNVbk5YYlhSVFRWWktlVll5ZUZOaFZscElaVVpzV0ZZemFGUldha0YzWlVaYWRWSnNUbWxXVm5CVlZrWmFZV1F4WkhOYVNFcFlZbFJzYjFadGVIZFhSbXQzWVVoT1YwMXJjRlpWYkZKRFYwWmFkRlZzYUZkaGEzQkhXbGQ0ZDFJeVJraGhSVFZPVmxoQ1dWWnFSbXRPUmxsNVZWaG9ZVkpYVWxoV01HUTBZMVpXYzFWdVRsaFNiRXBYVmxkMGExUnNXbk5qUm14aFZsZE5NVll3WkV0U01rcEZWMnhrVTJKWGFESldiWEJMVXpGa1YxVnVSbFppUjFKdldWUkdkbVZzV2xWUmJYUlRUVlZ3ZVZSc1dtRlVNVmw1WlVoQ1YyRnJjSFZhVmxwaFpFVXhWVkZzY0ZkTlJtOTNWbTB4TUdFeFdYaGFSV2hvVW0xU1lWbHNhRTVsUmxweFVtNU9hbUpIVWpCVmJYaGhWR3hhZFZGcVZsZGlWRUkwVldwS1IyTXhaSFZWYlhoVVVqTm9XbGRXVWtka01WWkhWMjVHVkdFelVsUlVWbHAzWlVaYWRFMVZaRlpOVm13MFZXMXdUMWRHV25OalIyaFdaV3R3VDFwV1dsTmpiRnB6Vkcxc1UySnJTbHBXYTFwVFVqRk5lRnBHWkZoaWJFcHpWVzE0ZDJNeFZuUmxTRTVQVW14d1NWUnNWVFZXYlVwV1kwVnNWMVl6VFRGV01qRkxWbFpLZFZkdFJsZGlTRUp2Vm1wQ2ExUXhTbk5qUldSWFlYcFdXRlJXVm5kWGJGbDRWV3RPVjAxclZqVlZiWFJyVmtaa1NHVklUbFppV0doTVZtMTRZV1JYVGtaYVIzUnBVbTVDU2xkc1ZtRmtNa3BIVjFob1dHRXllR0ZVVldSU1RVWmFWVk5yWkU5aVJuQmFWMnRhYTJGV1drWldXR1JYVFZad2FGWlhNVmRTTVhCSlZHMW9VMDF0YUZaV1YzaFhaREZrUjFwR2FHdFNNMUp3VkZkNFMyVnNXWGxrUm1SV1RXdHdSMVJzV205WGJVVjRZMGRvWVZZemFHaFZNR1JQVG14S2MxWnRiRk5pV0dOM1ZteFNTMDVIUlhoWFdHaFlZVEZ3YjFSVVNtOVhSbFp5Vm0xR1dGSnVRa2RXTW5NMVlXc3hXRlZxUWxwaE1YQlFWbFJLUzFOV1JuTmlSbVJvVFZoQ2VWZHJVa2RYYlZaSFdraEtZVkl5ZUZSWmJGcExWMnhrVjJGSVpHcE5WbkJJV1d0YWMyRnNTblJWYkd4WFlsaG9hRlJWV25kV2JIQkZVVzFvVTJFeWQzcFdiVEYzVmpGYVZrMVdaRlJpUlVwWVZGVmtVMUl4Y0ZaWGF6bHFZbFZhU0ZkcldrOWlSMFY0WTBad1YySkhVak5WYWtaU1pWWldjMXBHYUdsaGVsWjJWbGR3UzA1R1drZGlSbFpWWVRBMVQxUldXbmROUmxKWFZXeE9XR0pHYkRSVmJYQlRWMGRGZVdGR1FsZE5SMUpNV1RKNGEyTXhWbk5qUjJ4VFRXMW9WbFl4WkhkU01WVjRXa1ZvVm1FeWFGUlphMlJ2VjBac2NsZHNjRTVXYlZKNlZtMHhkMVF4V1hkWGJHaFdUV3BXVEZaRVJtRlhWa1p6V2taa2FHRjZWakpYYkdRMFdWZE9WMVJ1U210U2JWSllXVlJPUTA1c1duTlpNMmhUVFZac05WVXlkSE5WYlVwMFpVWnNWMkV4V21oWlZWcFhUbXhPY2s5WGNFNVdiRzk0Vm10amVGSXhWWGxUYkdSVVlrZDRXRlpxVG05aFJuQkZVbXMxYkZKdFVqRlZiWGhUWVVkRmQyTkdiRmhXYldnelZtcEdhMUl4WkZsaFIyaFRaVzE0V1ZaWGNFTmtNVTVIWVROa1dHSnJOVmxaYkZaM1YyeHNWbHBIT1ZkTlJFWklXVEJhYjFkck1YVmhSMmhoVW14d00xVXdaRTlUUjBwSFZXeE9WMWRGU2sxV2JYQkxUa1paZUZkdVNrOVdiV2hVV1cxNFMxWldiRlZUYkU1WFZtMTRNRlJzVms5WGJGcHpZMGh3VjAxcVZuSldha1pMWkVkV1IyRkdhR2hOVm13elZtcENZVmR0VVhoYVNFcHBVbXhhVDFadE5VTmxWbVJYVjIxR2FFMVZjSHBXUnpWTFZqSktTRlZyT1ZkaVZGWkVXbFphWVdSSFRrWmFSbWhwVm14d1NWWnJZekZVTWtaWFUxaHNiRkpzU21GWmJHaFRWRVp3V0dWSGRGaFNNVnBKVkRGa2MxUnNXbk5YVkVKWFlXdHJlRlpFUm1Ga1JrcFpZMFphYVZKdVFsZFdiWEJQWWpGT1IxVnVTbGhpVlZwVVZGZDBZVk5XVVhoWGJVWlZZa1p3TVZWWGRIZFhSMHBIVjIxb1ZtVnJXbUZhVlZwclkyeGtkR05HVG1oTlNFSjJWbXhrTUZZeGJGZFZXR2hxVW14d1dWbFVUbE5YUmxweFVXNWtWRkpzV2pCYVZXUkhWbGRLVmxkVVNsZGlSMmd6Vm1wR2ExTldSbkpoUmxwcFYwVXdlRlp0Y0VkU01rMTRWbTVPYWxKVVZrOVZiR2hEVkRGYWRHVkhSbFppVmtZelZERmFZV0ZzU2tkWGJUbFZWa1ZLU0ZwR1drNWxSbEoxVTJ4R1ZrMXJOVE5WZWtaR1QxWkNWRmt6UWt4VlZEQTVTbmxyY0NjcEtRPT0nKSk='))'))